package bot

import (
	"context"
	"fmt"
	"mikhailche/botcomod/repository"
	"mikhailche/botcomod/tracer"
	"strconv"
	"time"

	tele "github.com/mikhailche/telebot"
	"go.uber.org/zap"
)

type telegramRegistrator struct {
	log            *zap.Logger
	userRepository *repository.UserRepository
	houses         func() repository.THouses
	//buttons
	backBtn         tele.Btn
	adminApprove    tele.Btn
	adminDisapprove tele.Btn
	adminFail       tele.Btn
}

const registrationChatID = -1001860029647

func newTelegramRegistrator(log *zap.Logger, userRepository *repository.UserRepository, houses func() repository.THouses, backBtn tele.Btn) *telegramRegistrator {
	markup := &tele.ReplyMarkup{}
	return &telegramRegistrator{
		backBtn:         backBtn,
		log:             log,
		userRepository:  userRepository,
		houses:          houses,
		adminApprove:    markup.Data("‚úÖ –î–∞, –∫–∞–∂–µ—Ç—Å—è –≤—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç", "admin-approve-registration"),
		adminDisapprove: markup.Data("‚ùå –•–µ—Ä–Ω—è –∫–∞–∫–∞—è-—Ç–æ", "admin-disapprove-registration"),
		adminFail:       markup.Data("üîê –í —Ç–æ–ø–∫—É", "admin-fail-registration"),
	}
}

func (r *telegramRegistrator) EntryPoint() *tele.Btn {
	markup := &tele.ReplyMarkup{}
	e := markup.Data("üìí –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "registration")
	return &e
}

func (r *telegramRegistrator) Register(bot HandleRegistrator) {
	bot.Handle(r.EntryPoint(), r.HandleStartRegistration)
	bot.Handle(&r.adminApprove, r.HandleAdminApprovedRegistration)
	bot.Handle(&r.adminDisapprove, r.HandleAdminDisapprovedRegistration)
	bot.Handle(&r.adminFail, r.HandleAdminFailRegistration)
}

func (r *telegramRegistrator) HandleAdminApprovedRegistration(ctx context.Context, c tele.Context) error {
	userID, _ := strconv.Atoi(c.Args()[0])
	ctx, cancel := context.WithTimeout(ctx, time.Second)
	defer cancel()
	if err := r.userRepository.ConfirmRegistration(ctx, int64(userID), repository.ConfirmRegistrationEvent{
		UpdateID: int64(c.Update().ID),
		WithCode: "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è",
	}); err != nil {
		return fmt.Errorf("HandleAdminApprovedRegistration: %w", err)
	}
	c.EditOrReply(c.Message().Text + "\n–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
	_, err := c.Bot().Send(&tele.User{ID: int64(userID)}, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤.\n/help")
	return err
}

func (r *telegramRegistrator) HandleAdminDisapprovedRegistration(ctx context.Context, c tele.Context) error {
	userID, _ := strconv.Atoi(c.Args()[0])
	c.EditOrReply(c.Message().Text + "\n–ü–æ–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
	_, err := c.Bot().Send(
		&tele.User{ID: int64(userID)},
		"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–∞–∂–µ—Ç—Å—è, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ. –ê–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º.")
	return err
}

func (r *telegramRegistrator) HandleAdminFailRegistration(ctx context.Context, c tele.Context) error {
	userID, _ := strconv.Atoi(c.Args()[0])
	ctx, cancel := context.WithTimeout(ctx, time.Second)
	defer cancel()
	if err := r.userRepository.FailRegistration(ctx, int64(userID), repository.FailRegistrationEvent{
		UpdateID: int64(c.Update().ID),
		WithCode: "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è",
	}); err != nil {
		return fmt.Errorf("HandleAdminFailRegistration: %w", err)
	}
	c.EditOrReply(c.Message().Text + "\n–ü—Ä–æ–≤–∞–ª–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
	_, err := c.Bot().Send(&tele.User{ID: int64(userID)}, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è —Å –∫–≤–∞—Ä—Ç–∏—Ä–æ–π, —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	return err
}

func (r *telegramRegistrator) HandleMediaCreated(user *repository.User, ctx tele.Context) error {
	if ctx.Message().Photo == nil {
		return ctx.EditOrReply("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–≤–∏—Ç–Ω–∞—Ü–∏–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É. –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É–±–∏–¥–µ—Ç—å—Å—è, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Ä–∞–π–æ–Ω–∞.")
	}
	ctx.Reply("–°–ø–∞—Å–∏–±–æ. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ —Å–æ–æ–±—â–∏–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.")
	markup := &tele.ReplyMarkup{}
	markup.Inline(markup.Row(
		markup.Data(r.adminApprove.Text, r.adminApprove.Unique, fmt.Sprint(ctx.Sender().ID)),
		markup.Data(r.adminDisapprove.Text, r.adminDisapprove.Unique, fmt.Sprint(ctx.Sender().ID)),
		markup.Data(r.adminFail.Text, r.adminFail.Unique, fmt.Sprint(ctx.Sender().ID)),
	))
	if err := ctx.ForwardTo(&tele.Chat{ID: registrationChatID}, markup); err != nil {
		return fmt.Errorf("HandleMediaCreated: %w", err)
	}
	return sendToRegistrationGroup(ctx, r.log,
		`–§–æ—Ç–æ –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v %v %v.
		–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %v %v.
		–°—Ä–∞–≤–Ω–∏ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π. –ü–æ—Ö–æ–∂–µ?`,
		[]any{
			ctx.Sender().Username, ctx.Sender().FirstName, ctx.Sender().LastName,
			user.Registration.Events.Start.HouseNumber, user.Registration.Events.Start.Apartment},
		markup)
}

func (r *telegramRegistrator) HandleStartRegistration(ctx context.Context, c tele.Context) error {
	defer tracer.Trace("registerBtn")()
	user, err := r.userRepository.GetUser(ctx, r.userRepository.ByID(c.Sender().ID))
	if err != nil {
		return fmt.Errorf("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %w", err)
	}
	if user.Registration != nil {
		return c.EditOrReply(
			`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –∫–æ–º—É–Ω–∞–ª–∫—É. –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Ä–∞–π–æ–Ω–∞.`,
		)
	}
	data := c.Args()
	if len(data) == 0 || len(data) == 1 && data[0] == "" {
		chooseHouseMenu := &tele.ReplyMarkup{}
		var rows []tele.Row
		for _, house := range r.houses() {
			rows = append(rows, chooseHouseMenu.Row(chooseHouseMenu.Data(house.Number, r.EntryPoint().Unique, house.Number)))
		}
		rows = append(rows, chooseHouseMenu.Row(r.backBtn))
		chooseHouseMenu.Inline(rows...)
		return c.EditOrReply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞", chooseHouseMenu)
	}
	houseNumber := data[0]
	var house *repository.THouse
	for _, h := range r.houses() {
		if houseNumber == h.Number {
			house = &h
			break
		}
	}
	if house == nil {
		return c.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	}
	// –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–º–µ—Ä –¥–æ–º–∞
	if len(data) == 1 {
		chooseAppartmentRangeMenu := &tele.ReplyMarkup{}
		var rows []tele.Row
		for i := house.Rooms.Min; i <= house.Rooms.Max; i += 64 {
			range_min := i
			range_max := i + 63
			if range_max > house.Rooms.Max {
				range_max = house.Rooms.Max
			}
			rangeFmt := fmt.Sprintf("%d - %d", range_min, range_max)
			rows = append(rows, chooseAppartmentRangeMenu.Row(chooseAppartmentRangeMenu.Data(rangeFmt, r.EntryPoint().Unique, house.Number, fmt.Sprint(range_min))))
		}
		rows = append(rows, chooseAppartmentRangeMenu.Row(r.backBtn))
		chooseAppartmentRangeMenu.Inline(rows...)
		return c.EditOrReply("üè† –î–æ–º "+house.Number+". –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", chooseAppartmentRangeMenu)
	}
	appartmentRangeMin, err := strconv.Atoi(data[1])
	if err != nil {
		return c.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	}
	// –î–æ—Å—Ç—É–ø–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä
	if len(data) == 2 {
		chooseAppartmentMenu := &tele.ReplyMarkup{}
		var rows []tele.Row
		var buttons []tele.Btn

		for i := appartmentRangeMin; i <= appartmentRangeMin+65 && i <= house.Rooms.Max; i++ {
			buttons = append(buttons, chooseAppartmentMenu.Data(
				fmt.Sprint(i),
				r.EntryPoint().Unique, house.Number, fmt.Sprint(appartmentRangeMin), fmt.Sprint(i)))
			if i%8 == 0 {
				rows = append(rows, chooseAppartmentMenu.Row(buttons...))
				buttons = nil
			}
		}
		if len(buttons) > 0 {
			rows = append(rows, chooseAppartmentMenu.Row(buttons...))
			buttons = nil
		}
		rows = append(rows, chooseAppartmentMenu.Row(r.backBtn))
		chooseAppartmentMenu.Inline(rows...)
		return c.EditOrReply("üè† –î–æ–º "+house.Number+". –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", chooseAppartmentMenu)
	}
	appartmentNumber, err := strconv.Atoi(data[2])
	if err != nil {
		return c.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	}
	if len(data) == 3 {
		confirmMenu := &tele.ReplyMarkup{}
		confirmMenu.Inline(
			confirmMenu.Row(confirmMenu.Data("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", r.EntryPoint().Unique, house.Number, fmt.Sprint(appartmentRangeMin), fmt.Sprint(appartmentNumber), "OK")),
			confirmMenu.Row(confirmMenu.Data("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", r.EntryPoint().Unique, house.Number)),
			confirmMenu.Row(confirmMenu.Data("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞", r.EntryPoint().Unique)),
			confirmMenu.Row(r.backBtn),
		)
		return c.EditOrReply(fmt.Sprintf(`–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ.
üè† –î–æ–º %s
üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞ %d
–í—Å—ë –≤–µ—Ä–Ω–æ?`,
			houseNumber, appartmentNumber,
		),
			confirmMenu,
		)
	}
	code, err := r.userRepository.StartRegistration(context.Background(), c.Sender().ID, int64(c.Update().ID), houseNumber, fmt.Sprint(appartmentNumber))
	if err != nil {
		if serr := c.EditOrReply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø—Ä–∞–≤–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`); serr != nil {
			return serr
		}
		return fmt.Errorf("—Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
	}

	markup := &tele.ReplyMarkup{}
	markup.Inline(markup.Row(r.backBtn))
	if err := c.EditOrReply(`–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É. –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º —Ä–∞–π–æ–Ω–∞.`, markup); err != nil {
		return fmt.Errorf("–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
	}
	return sendToRegistrationGroup(c, r.log, "–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –î–æ–º %s –∫–≤–∞—Ä—Ç–∏—Ä–∞ %d. –ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", []any{houseNumber, appartmentNumber, code})
}

func sendToRegistrationGroup(ctx tele.Context, log *zap.Logger, message string, args []any, opts ...any) error {
	defer tracer.Trace("sendToRegistrationGroup")()
	log.Named("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä").Info(message, zap.Any("args", args))
	if _, err := ctx.Bot().Send(&tele.Chat{ID: registrationChatID}, fmt.Sprintf(message, args...), opts...); err != nil {
		return fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %v: %w", message, err)
	}
	return nil
}
