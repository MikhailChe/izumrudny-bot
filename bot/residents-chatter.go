package bot

import (
	"context"
	"fmt"
	"mikhailche/botcomod/lib/tracer.v2"
	"strconv"

	markup "mikhailche/botcomod/lib/bot-markup"
	repositories "mikhailche/botcomod/repository"

	"github.com/mikhailche/telebot"
)

type ResidentsChatter struct {
	users  residentsUserRepository
	houses func() repositories.THouses

	upperMenu telebot.Btn

	startChat             telebot.Btn
	houseIsChosen         telebot.Btn
	appartmentRangeChosen telebot.Btn
	appartmentChosen      telebot.Btn
	chatRequestApproved   telebot.Btn
	allowContact          telebot.Btn
	denyContact           telebot.Btn
}

type residentsUserRepository interface {
	FindByAppartment(ctx context.Context, house string, appartment string) (*repositories.User, error)
}

func NewResidentsChatter(ctx context.Context, users residentsUserRepository, houses func() repositories.THouses, upperMenu telebot.Btn) (*ResidentsChatter, error) {
	ctx, span := tracer.Open(ctx, tracer.Named("NewResidentsChatter"))
	defer span.Close()
	markup := &telebot.ReplyMarkup{}
	return &ResidentsChatter{
		users:                 users,
		houses:                houses,
		upperMenu:             upperMenu,
		startChat:             markup.Data("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º", "chat-with-resident"),
		houseIsChosen:         markup.Data("üè† –î–æ–º –≤—ã–±—Ä–∞–Ω", "chat-with-resident-house-chosen"),                          // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
		appartmentRangeChosen: markup.Data("üö™üö™ –î–∏–∞–ø–∞–∑–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä –≤—ã–±—Ä–∞–Ω", "chat-with-resident-appart-range"),            // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
		appartmentChosen:      markup.Data("üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞", "chat-with-resident-appart-chosen"),                   // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
		chatRequestApproved:   markup.Data("–ö—Ä–∏–∫–Ω—É—Ç—å", "chat-with-resident-confirm-request"),                           // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
		allowContact:          markup.Data("–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "chat-with-resident-allow-contact"), // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
		denyContact:           markup.Data("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "chat-with-resident-deny-contact"),  // –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è unique
	}, nil
}

type HandleRegistrator interface {
	Handle(endpoint interface{}, h telebot.HandlerFunc, m ...telebot.MiddlewareFunc)
}

func (r *ResidentsChatter) RegisterBotsHandlers(ctx context.Context, bot HandleRegistrator) {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::RegisterBotsHandlers"))
	defer span.Close()
	bot.Handle(&r.startChat, r.HandleChatWithResident)
	bot.Handle(&r.houseIsChosen, r.HandleHouseIsChosen)
	bot.Handle(&r.appartmentRangeChosen, r.HandleAppartmentRangeChosen)
	bot.Handle(&r.appartmentChosen, r.HandleAppartmentChosen)
	bot.Handle(&r.chatRequestApproved, r.HandleChatRequestApproved)
	bot.Handle(&r.allowContact, r.HandleAllowContact)
	bot.Handle(&r.denyContact, r.HandleDenyContact)
}

func (r *ResidentsChatter) HandleChatWithResident(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleChatWithResident"))
	defer span.Close()
	var rows []telebot.Row
	var buttons []telebot.Btn
	for _, house := range r.houses() {
		buttons = append(buttons, markup.Data(house.Number, r.houseIsChosen.Unique, house.Number))
		if len(buttons) > 3 {
			rows = append(rows, markup.Row(buttons...))
			buttons = nil
		}
	}
	if len(buttons) > 0 {
		rows = append(rows, markup.Row(buttons...))
		buttons = nil
	}
	rows = append(rows, markup.Row(r.upperMenu))
	return c.EditOrReply(ctx, "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞: –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ "+
		"–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞). –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Å–µ–º, –∫—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –≤—ã. "+
		"–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç–æ —è –æ—Ç–ø—Ä–∞–≤–ª—é –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.\n\n"+
		"–ò—Ç–∞–∫, —Å –∫–µ–º —Ö–æ—Ç–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è?\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ üè†",
		markup.InlineMarkup(rows...),
	)
}

func (r *ResidentsChatter) houseFromContext(ctx context.Context, number string) repositories.THouse {
	ctx, span := tracer.Open(ctx, tracer.Named("houseFromContext"))
	defer span.Close()
	for _, house := range r.houses() {
		if house.Number == number {
			return house
		}
	}
	return repositories.THouse{}
}

func (r *ResidentsChatter) HandleHouseIsChosen(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::ResidentsChatter"))
	defer span.Close()
	var house repositories.THouse = r.houseFromContext(ctx, c.Args()[0])
	markup := &telebot.ReplyMarkup{}
	var rows []telebot.Row
	{
		var buttons []telebot.Btn
		for i := house.Rooms.Min; i <= house.Rooms.Max; i += 64 {
			buttonText := fmt.Sprintf("%d - %d", i, i+64)
			buttons = append(buttons, markup.Data(buttonText, r.appartmentRangeChosen.Unique, append(c.Args(), fmt.Sprint(i))...))
			if len(buttons) > 3 {
				rows = append(rows, markup.Row(buttons...))
				buttons = nil
			}
		}
		if len(buttons) > 0 {
			rows = append(rows, markup.Row(buttons...))
			buttons = nil
		}
	}
	rows = append(rows, markup.Row(r.upperMenu))
	markup.Inline(rows...)
	return c.EditOrReply(ctx, fmt.Sprintf("üè† %s üè†\n–ö–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞?", house.Number), markup)
}

func (r *ResidentsChatter) HandleAppartmentRangeChosen(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleAppartmentRangeChosen"))
	defer span.Close()
	var house repositories.THouse = r.houseFromContext(ctx, c.Args()[0])
	appartmentRangeStart, err := strconv.Atoi(c.Args()[1])
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è —á–∞—Ç–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ [%v]: %w", c.Args()[1], err)
	}
	markup := &telebot.ReplyMarkup{}
	var rows []telebot.Row
	{
		var buttons []telebot.Btn
		for i := appartmentRangeStart; i <= appartmentRangeStart+64 && i <= house.Rooms.Max; i++ {
			buttons = append(buttons, markup.Data(fmt.Sprint(i), r.appartmentChosen.Unique, append(c.Args(), fmt.Sprint(i))...))
			if i%8 == 0 {
				rows = append(rows, markup.Row(buttons...))
				buttons = nil
			}
		}
		if len(buttons) > 0 {
			rows = append(rows, markup.Row(buttons...))
			buttons = nil
		}
	}
	rows = append(rows, markup.Row(r.upperMenu))
	markup.Inline(rows...)
	return c.EditOrReply(ctx, fmt.Sprintf("üè† %s üè†\n–ö–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞?", house.Number), markup)
}

func (r *ResidentsChatter) HandleAppartmentChosen(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleAppartmentChosen"))
	defer span.Close()
	var house repositories.THouse = r.houseFromContext(ctx, c.Args()[0])
	appartment, err := strconv.Atoi(c.Args()[2])
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è —á–∞—Ç–∞ —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ [%v]: %w", c.Args()[2], err)
	}
	markup := &telebot.ReplyMarkup{}
	markup.Inline(
		markup.Row(
			markup.Data("‚ùå –ù–µ–≤–µ—Ä–Ω–æ", r.startChat.Unique),
			markup.Data("‚úÖ –í—Å—ë –æ–∫", r.chatRequestApproved.Unique, c.Args()...),
		),
		markup.Row(r.upperMenu),
	)
	return c.EditOrReply(ctx, fmt.Sprintf("–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–î–æ–º üè† %s üè†\n–ö–≤–∞—Ä—Ç–∏—Ä–∞üö™ %d üö™", house.Number, appartment), markup)
}

func (r *ResidentsChatter) HandleChatRequestApproved(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleChatRequestApproved"))
	defer span.Close()
	var house repositories.THouse = r.houseFromContext(ctx, c.Args()[0])
	appartment, err := strconv.Atoi(c.Args()[2])
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è —á–∞—Ç–∞ —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ [%v]: %w", c.Args()[2], err)
	}

	user, err := r.users.FindByAppartment(ctx, house.Number, fmt.Sprint(appartment))
	if err == repositories.ErrNotFound {
		return fmt.Errorf(
			"–Ω–µ –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ –≤ [%v %d]: %w; %v",
			house.Number, appartment, err,
			c.EditOrReply(ctx, "–Ø –Ω–µ –Ω–∞—à–µ–ª –Ω–∏–∫–æ–≥–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É. –ü—Ä–∏–¥–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.", markup.InlineMarkup(markup.Row(r.upperMenu))),
		)
	}
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ –≤ [%v %d]: %w",
			house.Number, appartment, err,
		)
	}

	sendMyContactMarkup := &telebot.ReplyMarkup{}
	sendMyContactMarkup.Inline(
		sendMyContactMarkup.Row(
			sendMyContactMarkup.Data("‚ùå –ù–µ–ª—å–∑—è", r.denyContact.Unique, fmt.Sprint(c.Sender().ID)),
			sendMyContactMarkup.Data("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", r.allowContact.Unique, fmt.Sprint(c.Sender().ID)),
		),
		sendMyContactMarkup.Row(r.upperMenu),
	)

	if _, err := c.Bot().Send(ctx, &telebot.User{ID: user.ID},
		fmt.Sprintf(
			"–° –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è %s %s (@%s). –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?",
			c.Sender().FirstName, c.Sender().LastName, c.Sender().Username,
		),
		sendMyContactMarkup,
	); err != nil {
		return fmt.Errorf("–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç [%d]: %w", user.ID, err)
	}

	return c.EditOrReply(ctx,
		"–°–ø–∞—Å–∏–±–æ. –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ï—Å–ª–∏ –æ–Ω–∏ —Å–æ–≥–ª–∞—Å—è—Ç—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
		markup.InlineMarkup(markup.Row(r.upperMenu)),
	)
}

func (r *ResidentsChatter) HandleAllowContact(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleAllowContact"))
	defer span.Close()
	recepient, err := strconv.Atoi(c.Args()[0])
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ [%v]: %w",
			c.Args()[0], err,
		)
	}
	enjoy := &telebot.ReplyMarkup{}
	enjoy.Inline(
		enjoy.Row(enjoy.URL("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", fmt.Sprintf("tg://user?id=%d", c.Sender().ID))),
		enjoy.Row(r.upperMenu),
	)
	c.Bot().Send(ctx, &telebot.User{ID: int64(recepient)},
		fmt.Sprintf(
			"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s (@%s) —Ä–∞–∑—Ä–µ—à–∏–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –û–±—â–∞–π—Ç–µ—Å—å!",
			c.Sender().FirstName, c.Sender().LastName, c.Sender().Username,
		),
		enjoy,
	)

	enjoyReceipent := &telebot.ReplyMarkup{}
	enjoyReceipent.Inline(
		enjoyReceipent.Row(enjoy.URL("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", fmt.Sprintf("tg://user?id=%d", recepient))),
		enjoy.Row(r.upperMenu),
	)
	return c.EditOrReply(ctx, "–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.", enjoyReceipent)
}

func (r *ResidentsChatter) HandleDenyContact(ctx context.Context, c telebot.Context) error {
	ctx, span := tracer.Open(ctx, tracer.Named("ResidentsChatter::HandleDenyContact"))
	defer span.Close()
	recepient, err := strconv.Atoi(c.Args()[0])
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ: %w", err)
	}
	enjoy := &telebot.ReplyMarkup{}
	enjoy.Inline(
		enjoy.Row(r.upperMenu),
	)
	c.Bot().Send(ctx, &telebot.User{ID: int64(recepient)},
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–µ–ª–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –ü—Ä–∏–¥–µ—Ç—Å—è —Å—Ö–æ–¥–∏—Ç—å –∫ –Ω–µ–º—É –ø–µ—à–∫–æ–º.",
		enjoy,
	)

	enjoyReceipent := &telebot.ReplyMarkup{}
	enjoyReceipent.Inline(
		enjoyReceipent.Row(enjoy.URL("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", fmt.Sprintf("tg://user?id=%d", recepient))),
		enjoy.Row(r.upperMenu),
	)
	return c.EditOrReply(ctx, "–ù—É –ª–∞–¥–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–º –±—ã–ª–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ...", enjoyReceipent)
}
