package main

import (
	"context"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"

	"mikhailche/botcomod/repositories"
	. "mikhailche/botcomod/tracer"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

const botDescription = `–Ø –±–æ—Ç –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–∞ –ò–∑—É–º—Ä—É–¥–Ω—ã–π –ë–æ—Ä. –Ø –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø—É–Ω–∫—Ç –æ—Ö—Ä–∞–Ω—ã, –£–ö, –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —á–∞—Ç–∏–∫ –∏ —Å–æ—Å–µ–¥—Å–∫–∏–µ —á–∞—Ç—ã –¥–æ–º–æ–≤. 
–°–æ –º–Ω–æ–π –≤—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–∞–º–∏ –∂–∏—Ç–µ–ª–∏ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Ö. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –º–Ω–µ, –∞ —è –ø–µ—Ä–µ–¥–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.`

type tBot struct {
	bot *tele.Bot
}

func NewBot(log *zap.Logger, userRepository *UserRepository, houses func() repositories.THouses) (*tBot, error) {
	var b tBot
	rand.Seed(time.Now().UnixMicro())
	b.Init(log, userRepository, houses)
	return &b, nil
}

func (b *tBot) Init(log *zap.Logger, userRepository *UserRepository, houses func() repositories.THouses) {
	defer Trace("botInit")()
	var err error
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	pref := tele.Settings{
		Token:       telegramToken,
		Synchronous: true,
		Verbose:     false,
		Offline:     true,
		OnError: func(err error, c tele.Context) {
			defer Trace("Telebot::OnError")()
			if c != nil {
				log.Error("–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞", zap.Any("update", c.Update()), zap.Error(err), zap.Reflect("errorStruct", err), zap.String("errorType", fmt.Sprintf("%T", err)))
			} else {
				log.Error("–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞", zap.Error(err))
			}
			if _, err := c.Bot().Send(
				&tele.User{ID: developerID},
				fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %v", err.Error()),
			); err != nil {
				log.Error("–ù–µ —Å–º–æ–≥ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—É", zap.Error(err))
			}
		},
		Client: TracedHttpClient(telegramToken),
	}

	traceNewBot := Trace("NewBot")
	bot, err := tele.NewBot(pref)
	traceNewBot()
	if err != nil {
		log.Fatal("Cannot start bot", zap.Error(err))
		return
	}
	bot.Me.Username = "IzumrudnyBot" // It is not initialized in offline mode, but is needed for processing command in chat groups
	b.bot = bot

	bot.Use(func(hf tele.HandlerFunc) tele.HandlerFunc {
		return func(ctx tele.Context) error {
			defer Trace("TraceMiddleware")()
			return hf(ctx)
		}
	})

	bot.Use(func(hf tele.HandlerFunc) tele.HandlerFunc {
		return func(ctx tele.Context) error {
			defer Trace("RecoverMiddleware")()
			defer func() {
				defer Trace("RecoverMiddleware::defer")()
				if r := recover(); r != nil {
					log.WithOptions(zap.AddCallerSkip(3)).Error("–ü–∞–Ω–∏–∫–∞", zap.Any("panicObj", r))
					sendToDeveloper(ctx, log, fmt.Sprintf("–ü–∞–Ω–∏–∫–∞\n\n%v\n\n%#v", r, r))
				}
			}()
			return hf(ctx)
		}
	})

	bot.Use(func(hf tele.HandlerFunc) tele.HandlerFunc {
		return func(ctx tele.Context) error {
			defer Trace("UpsertUsername middleware")()
			userRepository.UpsertUsername(context.Background(), ctx.Sender().ID, ctx.Sender().Username)
			return hf(ctx)
		}
	})

	bot.Use(func(hf tele.HandlerFunc) tele.HandlerFunc {
		return func(ctx tele.Context) error {
			ctx.Respond(&tele.CallbackResponse{})
			return hf(ctx)
		}
	})

	bot.Handle("/chatidlink", func(ctx tele.Context) error {
		defer Trace("/chatidlink")()
		markup := &tele.ReplyMarkup{}
		markup.Inline(markup.Row(markup.URL("–û–±—â–∞—Ç—å—Å—è", fmt.Sprintf("tg://user?id=%s", ctx.Args()[0]))))
		return ctx.Reply("–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", markup)
	})

	var markup = bot.NewMarkup()
	helpMainMenuBtn := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "help-main-menu")
	districtChatsBtn := markup.Data("üí¨üèò –ß–∞—Ç—ã —Ä–∞–π–æ–Ω–∞", "district-chats")

	helpfulPhonesBtn := markup.Data("‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω—ã", "phone-numbers")

	residentsBtn := markup.Data("üè° –î–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", "authorized-section")
	intercomCodeBtn := markup.Data("üîë –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞", "intercom-code")
	videoCamerasBtn := markup.Data("üìΩ –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è", "internal-video-cameras")
	pmWithResidentsBtn := markup.Data("üí¨ –ß–∞—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏", "resident-pm")

	// registerBtn := markup.Data("üìí –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "registration")

	helpMenuMarkup := func() *tele.ReplyMarkup {
		defer Trace("helpMenuMarkup")()
		var markup = bot.NewMarkup()
		markup.Inline(
			markup.Row(districtChatsBtn),
			markup.Row(helpfulPhonesBtn),
			markup.Row(residentsBtn),
			markup.Row(markup.Text("üü¢ –ë–µ–∑ –∫–æ–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")),
		)
		return markup
	}

	helpHandler := func(ctx tele.Context) error {
		defer Trace("helpHandler")()
		return ctx.EditOrSend(
			"–ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ò–∑—É–º—Ä—É–¥–Ω–æ–º –ë–æ—Ä—É.\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /help",
			helpMenuMarkup(),
		)
	}
	bot.Handle("/help", helpHandler)
	bot.Handle(&helpMainMenuBtn, helpHandler)

	type chatInvite struct {
		group string
		name  string
		link  string
	}
	var inviteLinks []chatInvite = []chatInvite{
		{"common", "–û–±—â–∏–π —á–∞—Ç [800+]", "tg://join?invite=b8lTkd4S080xZmNi"}, // –î–∞–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
		{"common", "–í–µ—Å–µ–ª—ã–µ —Å–æ—Å–µ–¥–∏ [400+]", "tg://resolve?domain=izubor"},   // –í–µ—Å–µ–ª—ã–µ —Å–æ—Å–µ–¥–∏. @acroNT.
		{"", "–Ø - –º–∞—Å—Ç–µ—Ä (—É—Å–ª—É–≥–∏)", "tg://join?invite=NKvP4Z8aBJw5Nzky"},    // @kudahochy (–±—ã–≤–∞—à johnananin)
		{"", "108–ê (1)", ""}, // –ò—â–µ–º —á–∞—Ç. –¢–æ–ª—å–∫–æ whatsapp?
		{"", "108–ë (2.1)", "tg://join?invite=AAAAAE3DM-8CZRMXaWkdnA"},              // –ù–∞–¥–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –Ω–µ–∫–æ–µ–≥–æ –ú–∞–∫—Å–∏–º–∞? –ù–æ –¥—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø—Ä–æ—Ç–∏–≤
		{"", "108–í (2.2.3)", ""},                                                   // –Ω–µ—Ä–∞–±–æ—á–∞—è. –ê–¥–º–∏–Ω +79126108581 ?
		{"108g", "108–ì (2.2.1) [140+] üîê ", "tg://join?invite=hUZOcPT_D_xkNGNi"},    // –û–¥–æ–±—Ä–µ–Ω–Ω–æ
		{"", "108–ñ (3.1)", "tg://join?invite=OHMCklAiyh41MzMy"},                    // –ù–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –æ–¥–æ–±—Ä—Ä–µ–Ω–∏–µ
		{"", "–î–æ–º ‚Ññ7 108–ò (3.2) üîê", "tg://join?invite=gLliTXmLrw84MTUy"},           // –°—Å—ã–ª–∫–∞-–∑–∞—è–≤–∫–∞. –û–¥–æ–±—Ä–µ–Ω–∞.
		{"", "–î–æ–º ‚Ññ8 (22 —ç—Ç–∞–∂–∞) [I 2023]üîê", "tg://join?invite=p12hpWf0WMNjMGE6"},   // –°—Å—ã–ª–∫–∞-–∑–∞—è–≤–∫–∞. –û–¥–æ–±—Ä–µ–Ω–∞.
		{"", "–î–æ–º ‚Ññ9 (30 —ç—Ç–∞–∂–µ–π) [II 2023]üîê", "tg://join?invite=9z1C4B9Bzsc2MzI6"}, // –°—Å—ã–ª–∫–∞-–∑–∞—è–≤–∫–∞. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–∞–¥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º
		{"", "–î–æ–º ‚Ññ10 (30 —ç—Ç–∞–∂–µ–π) [II 2023]üîê", "tg://resolve?domain=ibdom10"},      // @johnananin
		{"", "–ü–∞—Ä–∫–∏–Ω–≥ (108–ö)", "tg://join?invite=Jmzyi_yzu1dkODAy"},                // –û–¥–æ–±—Ä–µ–Ω–Ω–æ
	}
	chatsHandler := func(ctx tele.Context) error {
		defer Trace("chatsHandler")()
		var markup = bot.NewMarkup()
		var rows []tele.Row
		var linkGroup []tele.Btn
		dumpMe := func() {
			if len(linkGroup) > 0 {
				rows = append(rows, markup.Row(linkGroup...))
			}
			linkGroup = nil
		}
		for i, link := range inviteLinks {
			if i > 0 && (link.group == "" || link.group != inviteLinks[i-1].group) {
				dumpMe()
			}
			// BEFORE POINTER
			// ------------------
			// AFTER POINTER
			if link.link != "" {
				linkGroup = append(linkGroup, markup.URL(link.name, link.link))
			}
			if i >= len(inviteLinks)-1 {
				dumpMe()
			}
		}
		rows = append(rows, markup.Row(helpMainMenuBtn))
		markup.Inline(rows...)
		return ctx.EditOrSend(
			"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ —á–∞—Ç–æ–≤.\n"+
				"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –Ω–∏—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ (üîê).",
			markup,
		)
	}
	bot.Handle(&districtChatsBtn, chatsHandler)
	bot.Handle("/chats", chatsHandler)

	phonesHandler := func(ctx tele.Context) error {
		defer Trace("phonesHandler")()
		markup := bot.NewMarkup()
		markup.Inline(
			markup.Row(helpMainMenuBtn),
		)

		return ctx.EditOrSend(
			"üëÆ –û—Ö—Ä–∞–Ω–∞  <b>+7-982-690-0793</b>\n"+
				"üö® –ê–≤–∞—Ä–∏–π–Ω–æ-–¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ <b>+7-343-317-0798</b>\n"+
				"üßë‚Äçüíºüëî –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è <b>+7-343-283-0555</b>\n\n"+
				"–ï—Å–ª–∏ –∑–¥–µ—Å—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ–± —ç—Ç–æ–º",
			tele.ModeHTML,
			markup)
	}
	bot.Handle(&helpfulPhonesBtn, phonesHandler)
	bot.Handle("/phones", phonesHandler)

	registrationService := newTelegramRegistrator(log, userRepository, houses, helpMainMenuBtn)
	registrationService.Register(bot)

	var authMiddleware tele.MiddlewareFunc = func(next tele.HandlerFunc) tele.HandlerFunc {
		return func(ctx tele.Context) error {
			defer Trace("AuthMiddleware")()
			if userRepository.IsResident(context.Background(), ctx.Sender().ID) {
				return next(ctx)
			}
			markup := bot.NewMarkup()
			var rows []tele.Row
			rows = append(rows, markup.Row(*registrationService.EntryPoint()))
			rows = append(rows, markup.Row(helpMainMenuBtn))
			markup.Inline(rows...)
			return ctx.EditOrSend(`–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑—É–º—Ä—É–¥–Ω–æ–≥–æ –±–æ—Ä–∞. 
–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π.

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–¥—É –æ—Ç –¥–æ–º–æ—Ñ–æ–Ω–∞ üîë, —Å—Å—ã–ª–∫–∞–º –Ω–∞ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–∞–π–æ–Ω–µ üìΩ.
–ê –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å–µ–¥—Å–∫–∏–µ —á–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∞—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.

–í –±—É–¥—É—â–µ–º –º—ã –¥–∞–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—â–∞—Ç—å—Å—è —Å –ª—é–±—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –ø–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ.`,
				markup,
			)
		}
	}

	carsService := NewCarsHandller(userRepository, &helpMainMenuBtn)
	carsService.Register(bot)

	getResidentsMarkup := func(ctx tele.Context) *tele.ReplyMarkup {
		defer Trace("getResidentsMarkup")()
		user, err := userRepository.GetById(context.Background(), ctx.Sender().ID)
		if err != nil || user.Registration == nil {
			residentsMenuMarkup := bot.NewMarkup()
			var rows []tele.Row
			rows = append(rows,
				// residentsMenuMarkup.Row(intercomCodeBtn),
				residentsMenuMarkup.Row(videoCamerasBtn),
				residentsMenuMarkup.Row(pmWithResidentsBtn),
				residentsMenuMarkup.Row(helpMainMenuBtn),
			)
			if userRepository.IsAdmin(context.Background(), ctx.Sender().ID) {
				rows = append(rows, residentsMenuMarkup.Row(carsService.EntryPoint()))
			}
			residentsMenuMarkup.Inline(rows...)
			return residentsMenuMarkup
		}
		continueRegisterBtn := markup.Data("üìí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", registrationService.EntryPoint().Unique)

		residentsMenuMarkup := bot.NewMarkup()
		residentsMenuMarkup.Inline(
			// residentsMenuMarkup.Row(intercomCodeBtn),
			residentsMenuMarkup.Row(videoCamerasBtn),
			residentsMenuMarkup.Row(pmWithResidentsBtn),
			residentsMenuMarkup.Row(continueRegisterBtn),
			residentsMenuMarkup.Row(helpMainMenuBtn),
		)
		return residentsMenuMarkup
	}

	registrationCheckApproveCode := func(ctx tele.Context, stdctx context.Context, user *User, approveCode string) error {
		if user.Registration == nil {
			return ctx.EditOrReply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å", getResidentsMarkup(ctx))
		}
		if approveCode == user.Registration.Events.Start.ApproveCode {
			userRepository.ConfirmRegistration(stdctx, ctx.Sender().ID, confirmRegistrationEvent{int64(ctx.Update().ID), approveCode})
			return ctx.EditOrReply("–°–ø–∞—Å–∏–±–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", getResidentsMarkup(ctx))
		} else {
			userRepository.FailRegistration(stdctx, ctx.Sender().ID, failRegistrationEvent{int64(ctx.Update().ID), approveCode})
			return ctx.EditOrReply("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ? –ü—Ä–æ—Ü–µ—Å—Å —Ç–∞–∫–æ–π –∂–µ: –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –∂–¥—ë—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É.", helpMenuMarkup())
		}
	}

	/*
		handleContinueRegistration := func(ctx tele.Context, stdctx context.Context, user *User) error {
			defer Trace("handleContinueRegistration")()
			if err != nil {
				return fmt.Errorf("–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
			}
			data := ctx.Args()
			if len(data) == 0 || len(data) == 1 && data[0] == "" {
				var allCodes []string = append(append([]string(nil), user.Registration.Events.Start.ApproveCode), user.Registration.Events.Start.InvalidCodes...)
				rand.Shuffle(len(allCodes), reflect.Swapper(allCodes))
				conRegMarkup := ctx.Bot().NewMarkup()
				var rows []tele.Row
				var buttons []tele.Btn
				for _, code := range allCodes {
					buttons = append(buttons, conRegMarkup.Data(code, registerBtn.Unique, code))
					if len(buttons) >= 2 {
						rows = append(rows, conRegMarkup.Row(buttons...))
						buttons = nil
					}
				}
				if len(buttons) > 0 {
					rows = append(rows, conRegMarkup.Row(buttons...))
					buttons = nil
				}
				rows = append(rows, conRegMarkup.Row(helpMainMenuBtn))
				conRegMarkup.Inline(rows...)
				return ctx.EditOrReply("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞—à–ª–∏ —É —Å–µ–±—è –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ.\n"+
					"–ï—Å–ª–∏ –í–∞—à –¥–æ–º –µ—â—ë –Ω–µ —Å–¥–∞–Ω, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Å—Ç—å—é —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è.", conRegMarkup)
			}
			return registrationCheckApproveCode(ctx, stdctx, user, data[0])
		}
	*/
	handleMaybeRegistration := func(ctx tele.Context, stdctx context.Context, token string) error {
		var approveToken useRegistrationApproveToken
		err := DecodeSignedMessage(token, &approveToken)
		if err != nil {
			return err
		}
		if approveToken.UserID != ctx.Sender().ID {
			return ctx.EditOrReply("–≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–ø—É—Ç–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω?", helpMenuMarkup())
		}
		user, err := userRepository.GetById(stdctx, ctx.Sender().ID)
		if err != nil {
			return err
		}
		return registrationCheckApproveCode(ctx, stdctx, user, approveToken.ApproveCode)
	}

	bot.Handle("/start", func(ctx tele.Context) error {
		defer Trace("/start")()
		if len(ctx.Args()) == 1 && len(ctx.Args()[0]) > 4 {
			if err := handleMaybeRegistration(ctx, context.Background(), ctx.Args()[0]); err == nil {
				return nil
			} else {
				log.Error("–û—à–∏–±–æ—á–Ω–∞—è /start —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", zap.Error(err))
			}
		}
		return ctx.EditOrReply("–ü—Ä–∏–≤–µ—Ç! " + botDescription + "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é")
	})
	/*
	   	bot.Handle(&registerBtn, func(ctx tele.Context) error {
	   		defer Trace("registerBtn")()
	   		stdctx := context.Background()
	   		user, err := userRepository.GetById(stdctx, ctx.Sender().ID)
	   		if err != nil {
	   			return fmt.Errorf("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %w", err)
	   		}
	   		if user.Registration != nil {
	   			return handleContinueRegistration(ctx, stdctx, user)
	   		}
	   		data := ctx.Args()
	   		if len(data) == 0 || len(data) == 1 && data[0] == "" {
	   			chooseHouseMenu := bot.NewMarkup()
	   			var rows []tele.Row
	   			for _, house := range HOUSES {
	   				rows = append(rows, chooseHouseMenu.Row(chooseHouseMenu.Data(house.number, registerBtn.Unique, house.number)))
	   			}
	   			rows = append(rows, chooseHouseMenu.Row(helpMainMenuBtn))
	   			chooseHouseMenu.Inline(rows...)
	   			return ctx.EditOrReply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞", chooseHouseMenu)
	   		}
	   		houseNumber := data[0]
	   		var house *tHouse
	   		for _, h := range HOUSES {
	   			if houseNumber == h.number {
	   				house = &h
	   				break
	   			}
	   		}
	   		if house == nil {
	   			return ctx.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	   		}
	   		// –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–º–µ—Ä –¥–æ–º–∞
	   		if len(data) == 1 {
	   			chooseAppartmentRangeMenu := bot.NewMarkup()
	   			var rows []tele.Row
	   			for i := house.rooms.min; i <= house.rooms.max; i += 64 {
	   				range_min := i
	   				range_max := i + 63
	   				if range_max > house.rooms.max {
	   					range_max = house.rooms.max
	   				}
	   				rangeFmt := fmt.Sprintf("%d - %d", range_min, range_max)
	   				rows = append(rows, chooseAppartmentRangeMenu.Row(chooseAppartmentRangeMenu.Data(rangeFmt, registerBtn.Unique, house.number, fmt.Sprint(range_min))))
	   			}
	   			rows = append(rows, chooseAppartmentRangeMenu.Row(helpMainMenuBtn))
	   			chooseAppartmentRangeMenu.Inline(rows...)
	   			return ctx.EditOrReply("üè† –î–æ–º "+house.number+". –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", chooseAppartmentRangeMenu)
	   		}
	   		appartmentRangeMin, err := strconv.Atoi(data[1])
	   		if err != nil {
	   			return ctx.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	   		}
	   		// –î–æ—Å—Ç—É–ø–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä
	   		if len(data) == 2 {
	   			chooseAppartmentMenu := bot.NewMarkup()
	   			var rows []tele.Row
	   			var buttons []tele.Btn

	   			for i := appartmentRangeMin; i <= appartmentRangeMin+65 && i <= house.rooms.max; i++ {
	   				buttons = append(buttons, chooseAppartmentMenu.Data(
	   					fmt.Sprint(i),
	   					registerBtn.Unique, house.number, fmt.Sprint(appartmentRangeMin), fmt.Sprint(i)))
	   				if i%8 == 0 {
	   					rows = append(rows, chooseAppartmentMenu.Row(buttons...))
	   					buttons = nil
	   				}
	   			}
	   			if len(buttons) > 0 {
	   				rows = append(rows, chooseAppartmentMenu.Row(buttons...))
	   				buttons = nil
	   			}
	   			rows = append(rows, chooseAppartmentMenu.Row(helpMainMenuBtn))
	   			chooseAppartmentMenu.Inline(rows...)
	   			return ctx.EditOrReply("üè† –î–æ–º "+house.number+". –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", chooseAppartmentMenu)
	   		}
	   		appartmentNumber, err := strconv.Atoi(data[2])
	   		if err != nil {
	   			return ctx.EditOrReply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
	   		}
	   		if len(data) == 3 {
	   			confirmMenu := bot.NewMarkup()
	   			confirmMenu.Inline(
	   				confirmMenu.Row(confirmMenu.Data("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", registerBtn.Unique, house.number, fmt.Sprint(appartmentRangeMin), fmt.Sprint(appartmentNumber), fmt.Sprint("OK"))),
	   				confirmMenu.Row(confirmMenu.Data("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", registerBtn.Unique, house.number)),
	   				confirmMenu.Row(confirmMenu.Data("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞", registerBtn.Unique)),
	   				confirmMenu.Row(helpMainMenuBtn),
	   			)
	   			return ctx.EditOrReply(fmt.Sprintf(`–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ.
	   üè† –î–æ–º %s
	   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞ %d
	   –í—Å—ë –≤–µ—Ä–Ω–æ?`,
	   				houseNumber, appartmentNumber,
	   			),
	   				confirmMenu,
	   			)
	   		}
	   		code, err := userRepository.StartRegistration(context.Background(), ctx.Sender().ID, int64(ctx.Update().ID), houseNumber, fmt.Sprint(appartmentNumber))
	   		if err != nil {
	   			if serr := ctx.EditOrReply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø—Ä–∞–≤–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`); serr != nil {
	   				return serr
	   			}
	   			return fmt.Errorf("—Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
	   		}
	   		if err := ctx.EditOrReply(`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
	   –í –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
	   –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.`, getResidentsMarkup(ctx)); err != nil {
	   			return fmt.Errorf("–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
	   		}
	   		return sendToDeveloper(ctx, log, fmt.Sprintf("–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –î–æ–º %s –∫–≤–∞—Ä—Ç–∏—Ä–∞ %d. –ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", houseNumber, appartmentNumber, code))
	   	})
	*/

	bot.Handle("/whoami", func(ctx tele.Context) error {
		defer Trace("/whoami")()
		userID := ctx.Sender().ID
		if len(ctx.Args()) > 0 && len(ctx.Args()[0]) > 0 {
			parsedUserID, err := strconv.Atoi(ctx.Args()[0])
			if err == nil {
				userID = int64(parsedUserID)
			}
		}
		user, err := userRepository.GetById(context.Background(), userID)
		if err != nil {
			return fmt.Errorf("–ù–µ –º–æ–≥—É –¥–æ—Å—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}
		userRepository.IsResident(context.Background(), userID)
		return ctx.EditOrReply(fmt.Sprintf("%v\n\n%#v\n\n%+v", *user, *user, *user))
	})

	authGroup := bot.Group()
	authGroup.Use(authMiddleware)

	residentsHandler := func(ctx tele.Context) error {
		defer Trace("residentsHandler")()
		return ctx.EditOrSend("–ù–µ–º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", getResidentsMarkup(ctx))
	}
	authGroup.Handle(&residentsBtn, residentsHandler)

	intercomHandlers := func(ctx tele.Context) error {
		defer Trace("intercomHandlers")()
		return ctx.EditOrSend("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –¥–æ–º–æ—Ñ–æ–Ω. –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ —Ç–µ—É–∫—â–∏–π –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –º–Ω–µ.", getResidentsMarkup(ctx))
	}
	authGroup.Handle(&intercomCodeBtn, intercomHandlers)

	videoCamerasHandler := func(ctx tele.Context) error {
		defer Trace("videoCamerasHandler")()
		return ctx.EditOrSend(`
<a href="https://vs.domru.ru">–ü–ª–æ—â–∞–¥–∫–∞ 108–ê</a>
–õ–æ–≥–∏–Ω: <code>ertel-wk-557</code>
–ü–∞—Ä–æ–ª—å: <code>uu4rg2x3</code>

<a href="https://video.ugmk-telecom.ru">–ü–ª–æ—â–∞–¥–∫–∞ 108–ë</a>
–õ–æ–≥–∏–Ω: <code>108b</code>
–ü–∞—Ä–æ–ª—å: <code>izumrud20</code>

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –§–æ—Ä–ø–æ—Å—Ç.
`,
			tele.ModeHTML,
			getResidentsMarkup(ctx))
	}
	authGroup.Handle(&videoCamerasBtn, videoCamerasHandler)

	residentsChatter, err := NewResidentsChatter(userRepository, houses, helpMainMenuBtn)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤", zap.Error(err))
	}

	residentsChatter.RegisterBotsHandlers(authGroup)
	pmWithResidentsHandler := func(ctx tele.Context) error {
		defer Trace("pmWithResidentsHandler")()
		return residentsChatter.HandleChatWithResident(ctx)
	}
	authGroup.Handle("/connect", pmWithResidentsHandler)
	authGroup.Handle(&pmWithResidentsBtn, pmWithResidentsHandler)

	bot.Handle("/reply", func(ctx tele.Context) error {
		if len(ctx.Args()) <= 1 {
			return nil
		}

		id, err := strconv.Atoi(ctx.Args()[0])
		if err != nil {
			return fmt.Errorf(
				"–ø–∞—Ä—Å–∏–Ω–≥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞: %v: %w",
				ctx.Reply(fmt.Sprintf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: %v", err)),
				err,
			)
		}
		message := strings.Join(ctx.Args()[1:], " ")
		_, err = ctx.Bot().Send(&tele.User{ID: int64(id)}, message)
		if err != nil {
			return fmt.Errorf("/reply –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %w", err)
		}
		return nil
	})

	bot.Handle("/manual_register", func(ctx tele.Context) error {
		if !userRepository.IsAdmin(context.Background(), ctx.Sender().ID) {
			return nil
		}
		userID, err := strconv.ParseInt(ctx.Args()[0], 10, 64)
		if err != nil {
			return ctx.Reply(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π: %v", userID))
		}

		approveCode, err := userRepository.StartRegistration(context.Background(),
			userID,
			int64(ctx.Update().ID),
			ctx.Args()[1],
			ctx.Args()[2])
		if err != nil {
			return ctx.Reply(fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err))
		}

		if _, err := ctx.Bot().Send(
			&tele.User{ID: int64(userID)},
			`–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. 
–ü–æ–∫–∞ —á—Ç–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑–¥–µ–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è.
–í –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
`,
		); err != nil {
			return fmt.Errorf("—É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏: %w", err)
		}
		return ctx.Reply(fmt.Sprintf("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ [%v] –≤ –¥–æ–º %v –∫–≤–∞—Ä—Ç–∏—Ä–∞ %v", approveCode, ctx.Args()[1], ctx.Args()[2]))

	})

	bot.Handle("/status", func(ctx tele.Context) error {
		defer Trace("/status")()
		// return ctx.EditOrSend("üü° –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –ª–∏–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ú–¢–°")
		return ctx.EditOrSend("üü¢ –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
	})

	bot.Handle(tele.OnText, forwardToDeveloper(log))
	bot.Handle(tele.OnMedia, func(ctx tele.Context) error {
		stdctx, cancel := context.WithTimeout(context.Background(), time.Second)
		defer cancel()
		user, err := userRepository.GetById(stdctx, int64(ctx.Sender().ID))
		if err != nil {
			return fmt.Errorf("tele.OnMedia: %w", err)
		}
		if user.Registration != nil {
			return registrationService.HandleMediaCreated(user, ctx)
		}
		return forwardToDeveloper(log)(ctx)
	})
	botInitHandleService(bot)
}

func botInitHandleService(bot *tele.Bot) {
	defer Trace("botInitHandleService")()
	bot.Handle("/service", func(ctx tele.Context) error {
		if err := bot.SetCommands([]tele.Command{
			{Text: "help", Description: "–°–ø—Ä–∞–≤–∫–∞"},
			{Text: "chats", Description: "–ß–∞—Ç—ã —Ä–∞–π–æ–Ω–∞"},
			{Text: "phones", Description: "–¢–µ–ª–µ—Ñ–æ–Ω—ã —Å–ª—É–∂–±"},
			{Text: "status", Description: "–°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Ä–∞–π–æ–Ω–µ."},
		}, "ru"); err != nil {
			return fmt.Errorf("/service SetCommands: %w", err)
		}

		if _, err := bot.Raw("setMyDescription", map[string]string{
			"description": botDescription,
		}); err != nil {
			return fmt.Errorf("/service setMyDescription: %w", err)
		}

		if _, err := bot.Raw("setMyShortDescription", map[string]string{
			"short_description": "–ë–æ—Ç –∏–∑—É–º—Ä–¥—É–Ω–æ–≥–æ –±–æ—Ä–∞. –ü–æ–ª–µ–∑–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã, –∞–Ω–æ–Ω—Å—ã.",
		}); err != nil {
			return fmt.Errorf("/service setMyShortDescription: %w", err)
		}
		return nil
	})
}
